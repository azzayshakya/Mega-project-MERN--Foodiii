{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Mega-project-MERN--Foodiii\\\\foodiii\\\\src\\\\Screens\\\\RestOrder.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, memo } from 'react';\nimport SingleRestOrder from './SingleRestOrder';\nimport Header from '../Component/Header';\nimport background from \"../Images/collections-1.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestOrder = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [ordersByDate, setOrdersByDate] = useState(new Map());\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hour12: true\n    };\n    const formattedDate = new Date(dateString).toLocaleDateString(undefined, options);\n    return formattedDate;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      let response = await fetch(\"http://localhost:5000/api/getOrderOfMyresturant\", {\n        method: \"GET\"\n      });\n      response = await response.json();\n      setData(response.data);\n\n      // Move ordersByDate inside useEffect\n      const newOrdersByDate = new Map();\n      response.data.forEach(order => {\n        const date = formatDate(order.date); // Extract and format only the date part\n        if (!newOrdersByDate.has(date)) {\n          newOrdersByDate.set(date, []);\n        }\n        newOrdersByDate.get(date).push(order);\n      });\n\n      // Update state with newOrdersByDate\n      setOrdersByDate(newOrdersByDate);\n    };\n    fetchData();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {/* backgroundImage: `url(${background})` */},\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"yourrestorderheading\",\n        children: \"Your restaurant orders :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [...ordersByDate.keys()].map(date => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"nine\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ordersByDate.get(date).map((item, index) => /*#__PURE__*/_jsxDEV(SingleRestOrder, {\n              item: item\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(RestOrder, \"ubFlmVeSqSstitmDUAmUGMrT/VM=\");\n_c = RestOrder;\nexport default _c2 = /*#__PURE__*/memo(RestOrder);\nvar _c, _c2;\n$RefreshReg$(_c, \"RestOrder\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","memo","SingleRestOrder","Header","background","jsxDEV","_jsxDEV","RestOrder","_s","data","setData","ordersByDate","setOrdersByDate","Map","formatDate","dateString","options","year","month","day","hour","minute","second","hour12","formattedDate","Date","toLocaleDateString","undefined","fetchData","response","fetch","method","json","newOrdersByDate","forEach","order","date","has","set","get","push","children","fileName","_jsxFileName","lineNumber","columnNumber","style","className","keys","map","class","item","index","_c","_c2","$RefreshReg$"],"sources":["D:/Github/Mega-project-MERN--Foodiii/foodiii/src/Screens/RestOrder.js"],"sourcesContent":["import React, { useEffect, useState, memo } from 'react';\r\nimport SingleRestOrder from './SingleRestOrder';\r\nimport Header from '../Component/Header';\r\nimport background from \"../Images/collections-1.jpg\";\r\n\r\nconst RestOrder = () => {\r\n  const [data, setData] = useState([]);\r\n  const [ordersByDate, setOrdersByDate] = useState(new Map());\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true };\r\n    const formattedDate = new Date(dateString).toLocaleDateString(undefined, options);\r\n    return formattedDate;\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let response = await fetch(\"http://localhost:5000/api/getOrderOfMyresturant\", {\r\n        method: \"GET\"\r\n      });\r\n\r\n      response = await response.json();\r\n      setData(response.data);\r\n\r\n      // Move ordersByDate inside useEffect\r\n      const newOrdersByDate = new Map();\r\n      response.data.forEach((order) => {\r\n        const date = formatDate(order.date); // Extract and format only the date part\r\n        if (!newOrdersByDate.has(date)) {\r\n          newOrdersByDate.set(date, []);\r\n        }\r\n        newOrdersByDate.get(date).push(order);\r\n      });\r\n\r\n      // Update state with newOrdersByDate\r\n      setOrdersByDate(newOrdersByDate);\r\n    };\r\n\r\n    fetchData();\r\n  }, [data]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div style={{ /* backgroundImage: `url(${background})` */ }}>\r\n        <div className='yourrestorderheading'>Your restaurant orders :</div>\r\n        <div>\r\n          {/* Render orders by date */}\r\n          {[...ordersByDate.keys()].map((date) => (\r\n            <div key={date}>\r\n              <div class=\"nine\">\r\n                <h1><span>{date}</span></h1>\r\n              </div>\r\n              <ul>\r\n                {ordersByDate.get(date).map((item, index) => (\r\n                  <SingleRestOrder key={index} item={item} />\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(RestOrder);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}